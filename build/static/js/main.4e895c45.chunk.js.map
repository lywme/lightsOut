{"version":3,"sources":["Block.js","Lightsout.js","App.js","serviceWorker.js","index.js"],"names":["Block","props","className","this","isLit","onClick","click","Component","Lightsout","blockClick","index","numIndex","split","parseInt","console","log","above","below","left","right","matrix","state","length","setState","pre","tryTimes","isWin","i","num","j","push","Array","Math","floor","random","key","class","window","location","reload","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4e895c45.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport './Block.css'\n\nclass Block extends Component{\n    constructor(props)\n    {\n        super(props);\n\n    }\n\n\n    render(){\n        return (\n            <div className={this.props.isLit?\"blockLit\":\"blockNotLit\"} onClick={this.props.click}>\n\n            </div>\n        );\n    }\n}\n\nexport default Block;","import React,{Component} from 'react';\nimport './Lightsout.css'\nimport Block from './Block';\n\nclass Lightsout extends Component{\n    constructor(props)\n    {\n        super(props);\n        this.state={matrix:[],tryTimes:0};\n    }\n\n    componentWillMount(){\n        let matrix=[];\n        for(let i=0;i<this.props.num;i++)\n        {\n            matrix.push(new Array(this.props.num));\n        }\n\n        for(let i=0;i<this.props.num;i++)\n        {\n            for(let j=0;j<this.props.num;j++)\n            {\n                matrix[i][j]=Math.floor(Math.random()*2);\n                //matrix[i][j]=Math.random()<0.25?1:0;\n            }\n        }\n\n        //console.log(matrix);\n        \n        //测试作弊专用 for cheat test\n        //matrix=[[0,0,0,1,0],[0,0,1,1,1],[0,0,0,1,0],[0,0,0,0,0],[0,0,0,0,0]];\n        this.setState({matrix:matrix});\n    }\n\n\n    blockClick=(index)=>{\n        //get the index of block clicked\n        //console.log(index);\n        let numIndex=index.split('');\n        numIndex=[parseInt(numIndex[0]),parseInt(numIndex[1])];\n        console.log(numIndex);\n\n\n        //affect + area\n        const above=[numIndex[0]-1,numIndex[1]];\n        const below=[numIndex[0]+1,numIndex[1]];\n        const left=[numIndex[0],numIndex[1]-1];\n        const right=[numIndex[0],numIndex[1]+1]\n        //console.log(\"above:\"+above+\".\"+\"below:\"+below+\".\"+\"left:\"+left+\".\"+\"right:\"+right+\".\")\n\n        let matrix=this.state.matrix;\n        //改变影响区域中的值 0变1，1变0\n        if(above[0]>=0&&above[0]<matrix.length&&above[1]>=0&&above[1]<matrix.length)\n        {\n            matrix[above[0]][above[1]]===0?matrix[above[0]][above[1]]=1:matrix[above[0]][above[1]]=0;\n        }\n\n\n        //改变影响区域中的值 0变1，1变0\n        if(below[0]>=0&&below[0]<matrix.length&&below[1]>=0&&below[1]<matrix.length)\n        {\n            matrix[below[0]][below[1]]===0?matrix[below[0]][below[1]]=1:matrix[below[0]][below[1]]=0;\n        }\n\n        //改变影响区域中的值 0变1，1变0\n        if(left[0]>=0&&left[0]<matrix.length&&left[1]>=0&&left[1]<matrix.length)\n        {\n            matrix[left[0]][left[1]]===0?matrix[left[0]][left[1]]=1:matrix[left[0]][left[1]]=0;\n        }\n\n        //改变影响区域中的值 0变1，1变0\n        if(right[0]>=0&&right[0]<matrix.length&&right[1]>=0&&right[1]<matrix.length)\n        {\n            matrix[right[0]][right[1]]===0?matrix[right[0]][right[1]]=1:matrix[right[0]][right[1]]=0;\n        }\n\n        //改变影响区域中的值 0变1，1变0\n        matrix[numIndex[0]][numIndex[1]]===0?matrix[numIndex[0]][numIndex[1]]=1:matrix[numIndex[0]][numIndex[1]]=0;\n\n        //console.log(matrix);\n        this.setState((pre)=>({matrix:matrix,tryTimes:pre.tryTimes+1}));\n    }\n\n    isWin=()=>{\n        let matrix=this.state.matrix;\n        for(let i=0;i<this.props.num;i++)\n        {\n            for(let j=0;j<this.props.num;j++)\n            {\n                if(matrix[i][j]===1)\n                {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    \n    render(){\n    \n        let matrix=[];\n        for(let i=0;i<this.props.num;i++)\n        {\n            for(let j=0;j<this.props.num;j++)\n            {\n                if(this.state.matrix[i][j]===0)\n                {\n                    matrix.push(<Block key={i+''+j} click={()=>this.blockClick(i+''+j)}/>);\n                }\n                else\n                {\n                    matrix.push(<Block key={i+''+j} click={()=>this.blockClick(i+''+j)} isLit/>);\n                }\n            }\n        }\n        \n        return (\n            <div class=\"container\">\n                <span className=\"neon-orange\">Lights</span>\n                <span className=\"neon-blue\">Out</span>\n                {!this.isWin()?\n                <div><div className=\"grid\">\n                    {matrix}\n                </div><p className=\"neon-info\">Number of tries: {this.state.tryTimes}</p><button onClick={()=>window.location.reload()}>Reset game.</button></div>:<div><p className=\"neon-info\">You win with {this.state.tryTimes} tries !!!</p><button onClick={()=>window.location.reload()}>Play again.</button></div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Lightsout;","import React from 'react';\nimport './App.css';\nimport Lightsout from './Lightsout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Lightsout\">\n        <Lightsout num={5} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}